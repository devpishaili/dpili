@use "sass:math";
// VARIABLES
$grid-columns: 12;
$grid-gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);
$layout-values: (
  "fs": flex-start,
  "fe": flex-end,
  "c": center,
  "sb": space-between,
  "sa": space-around,
);

/* GRID LAYOUT */
.grid-layout {
  display: grid;
}
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}
.row {
  display: flex;
  flex-flow: row wrap;
  width: 100%;
}

/* */
/* GRID POSITIONS */

// Justify content classes
@each $key, $val in $layout-values {
  .justify-#{$key} {
    justify-content: #{$val};
  }
}
.grid-all-center {
  justify-content: center;
  align-items: center;
}

/* GRID GAP */
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
}

/* GRID COLUMN CLASSES */
@include xs {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
